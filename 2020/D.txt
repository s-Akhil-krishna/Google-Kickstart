from functools import lru_cache
num = lambda : int(input())
numList = lambda: list(map(int,input().split()))
strList = lambda : input().split()

T = num()
for t in range(1,T+1):
    N,K = numList()
    strings = []
    for i in range(N):
        strings.append(input())
    strings.sort()
    @lru_cache(None)
    def match(x,y):
        m,n = len(x),len(y)
        i = j = 0
        res = 0
        while i<m and j<n:
            if x[i]!=y[j]:return res
            res += 1
            i , j = i+1, j+1
        return res
    
    dd = {}
    #[score,size]
    for x in strings:
        flag = 0
        for y in dd:
            if dd[y][1] < K:
                flag = 1
                cand = match(x,y)
                if cand: dd[y][1]+=1
                dd[y][0] = min(cand,dd[y][0])
                break
        if flag == 0:
            dd[x] = [float('inf'),1]
    res = 0
    for y in dd:
        if dd[y][1] == K:res += dd[y][0]
    print("Case #{}: {}".format(t,res))
    
        